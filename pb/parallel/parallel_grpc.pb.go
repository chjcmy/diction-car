// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proto/parallel.proto

package parallel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParallelClient is the client API for Parallel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParallelClient interface {
	Paralleler(ctx context.Context, in *ParallelRequest, opts ...grpc.CallOption) (*ParallelReply, error)
}

type parallelClient struct {
	cc grpc.ClientConnInterface
}

func NewParallelClient(cc grpc.ClientConnInterface) ParallelClient {
	return &parallelClient{cc}
}

func (c *parallelClient) Paralleler(ctx context.Context, in *ParallelRequest, opts ...grpc.CallOption) (*ParallelReply, error) {
	out := new(ParallelReply)
	err := c.cc.Invoke(ctx, "/pb.Parallel/Paralleler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParallelServer is the server API for Parallel service.
// All implementations must embed UnimplementedParallelServer
// for forward compatibility
type ParallelServer interface {
	Paralleler(context.Context, *ParallelRequest) (*ParallelReply, error)
	mustEmbedUnimplementedParallelServer()
}

// UnimplementedParallelServer must be embedded to have forward compatible implementations.
type UnimplementedParallelServer struct {
}

func (UnimplementedParallelServer) Paralleler(context.Context, *ParallelRequest) (*ParallelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paralleler not implemented")
}
func (UnimplementedParallelServer) mustEmbedUnimplementedParallelServer() {}

// UnsafeParallelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParallelServer will
// result in compilation errors.
type UnsafeParallelServer interface {
	mustEmbedUnimplementedParallelServer()
}

func RegisterParallelServer(s grpc.ServiceRegistrar, srv ParallelServer) {
	s.RegisterService(&Parallel_ServiceDesc, srv)
}

func _Parallel_Paralleler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParallelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParallelServer).Paralleler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Parallel/Paralleler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParallelServer).Paralleler(ctx, req.(*ParallelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Parallel_ServiceDesc is the grpc.ServiceDesc for Parallel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parallel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Parallel",
	HandlerType: (*ParallelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paralleler",
			Handler:    _Parallel_Paralleler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/parallel.proto",
}
